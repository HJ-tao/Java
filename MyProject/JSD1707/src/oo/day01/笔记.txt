
 * OOA-----面向对象分析 
 * OOD-----面向对象设计 
 * OOP-----面向对象编程
 * 
 * 面向过程的结构化程序设计弊端：
 * 1)缺乏对数据的封装
 * 2)数据与方法(操作数据)的分离
 * 
 * 类(对象):
 * 1)现实世界是由很多很多对象组成的
 *   基于对象抽出了类
 * 2)对象:真实存在的单个个体
 *   类:类别/类型,代表一类个体
 * 3)类中可以包含:
 *   3.1)所有对象所共有的属性/特征----成员变量
 *   3.2)所有对象所共有的行为---------方法
 * 4)一个类可以创建多个对象
 *   同一类型的多个对象，结构相同，数据不同
 * 5)类是对象的模板，对象是类的具体实例
 *
 * String,类都是引用类型.
 * 
 * 引用类型之间画等号:
 * 1)指向同一个对象
 * 2)对其中一个引用的修改会影响另一个引用(对象只有一个)
 *
 * 基本类型之间画等号:
 * 1)赋值
 * 2)对其中一个变量的修改不会影响另一个变量(数据是两份)
 *
 *
 * null和NullPointerException:
 * null:空，没有指向任何对象
 *      若引用的值为null，则该引用不能再进行任何操作了
 *      若操作则提示NullPointerException空指针异常  
 * 
 * Student         zs            =   new Student();  //创建对象的过程称为实例化
 * 数据类型  (引用)引用类型变量  指向      对象
 *
 *
 * 高质量代码： 复用性好，扩展性好，维护性好，可移植性好，可读性好，效率好，用户体验好……
 * 
 * 